/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { AppContext, RootValues } from "./../schema";
import type {
  PageSource,
  PageMetaSource,
  PageMetaCustomSource,
} from "./../pages";

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PageInputMetaWhere: {
    // input type
    eq?: string | null; // String
    in?: Array<string | null> | null; // [String]
    property?: string | null; // String
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Page: PageSource;
  PageMeta: PageMetaSource;
  PageMetaCustom: PageMetaCustomSource;
  Query: RootValues;
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Page: {
    // field return type
    id: string; // ID!
    meta: NexusGenRootTypes["PageMeta"] | null; // PageMeta
    name: string; // String!
    path: string; // String!
    title: string; // String!
  };
  PageMeta: {
    // field return type
    asocialImageAssetId: string | null; // String
    custom: Array<NexusGenRootTypes["PageMetaCustom"] | null> | null; // [PageMetaCustom]
    description: string | null; // String
    excludePageFromSearch: boolean | null; // Boolean
    title: string | null; // String
  };
  PageMetaCustom: {
    // field return type
    content: string | null; // String
    property: string | null; // String
  };
  Query: {
    // field return type
    pages: Array<NexusGenRootTypes["Page"] | null>; // [Page]!
    version: number | null; // Int
  };
}

export interface NexusGenFieldTypeNames {
  Page: {
    // field return type name
    id: "ID";
    meta: "PageMeta";
    name: "String";
    path: "String";
    title: "String";
  };
  PageMeta: {
    // field return type name
    asocialImageAssetId: "String";
    custom: "PageMetaCustom";
    description: "String";
    excludePageFromSearch: "Boolean";
    title: "String";
  };
  PageMetaCustom: {
    // field return type name
    content: "String";
    property: "String";
  };
  Query: {
    // field return type name
    pages: "Page";
    version: "Int";
  };
}

export interface NexusGenArgTypes {
  Query: {
    pages: {
      // args
      where?: NexusGenInputs["PageInputMetaWhere"] | null; // PageInputMetaWhere
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: AppContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
